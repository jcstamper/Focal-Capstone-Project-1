b'<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE workbook_page PUBLIC "-//Carnegie Mellon University//DTD Workbook Page MathML 3.8//EN" "http://oli.web.cmu.edu/dtd/oli_workbook_page_mathml_3_8.dtd"><workbook_page xmlns:bib="http://bibtexml.sf.net/" xmlns:cmd="http://oli.web.cmu.edu/content/metadata/2.1/" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pref="http://oli.web.cmu.edu/preferences/" xmlns:theme="http://oli.web.cmu.edu/presentation/" xmlns:wb="http://oli.web.cmu.edu/activity/workbook/" id="c147d074d17c43879f2aef50c9a32f32"><head><title>Overview</title></head><body><p id="e442c119d1744a6392b6b97ec376b6fe">Following the requirements document, it is vital to develop a design for the project. This is the most important documentation of the project as it provides not only a low-level design of the system but also dives deep into the implementation details of the system. Some key design considerations that developers should address include assumptions that they will be making throughout the project, the various constraints involved, the system environment, and the design methodology.</p><p id="fb27526f121e48f5a26888e1e76391b3">The data science project&apos;s design document should explain the entire system architecture of both the low-level and high-level components. A system architecture diagram can significantly simplify the explanation of the solution&apos;s architecture.</p><image id="f409c47915cb431d87f349a33d135745" src="../webcontent/image-c147d074d17c43879f2aef50c9a32f32-1.png" alt="" style="inline" vertical-align="middle" height="323" width="650"><caption><p id="b8feb3f7d5d442c494671976abb23388">Figure 1. Overview of ACAI Architecture (MCDS Capstone Project, 2020)</p></caption><popout enable="false"></popout></image><p id="ae9057c5caef4f018a10458ee0d997ad">While developing this architecture, the team can identify various bottlenecks of the project. Developers should be aware of the data used in the project and the various transformations that the data would go through. Thus a clear understanding of the data flow and design must be developed. This can be done by using various flow diagrams. Based on relevance, a number of diagrams like domain model, component, interface design, activity, entity, class, and sequence diagrams can be modeled in order to obtain an overall understanding of the design considerations that need to be made and to describe an overview of the implementation of the project. Context diagrams, problem diagrams, and frame diagrams can be used to outline the scope of the project. The dependencies in a project can be depicted via entity-relationship diagrams. Dataflow diagrams can be used to explain the flow of information from one module to another. Activity and sequence diagrams explain the interaction between systems or modules. Unlike these diagrams, use case diagrams document the user interactions with the system. State machine diagrams depict the system behaviors for various events.</p><image id="a8da9045818a437b8c256ddf1fa6faad" src="../webcontent/image-c147d074d17c43879f2aef50c9a32f32-2.png" alt="" style="inline" vertical-align="middle" height="362" width="468"><caption><p id="ca536291beed4f17a530d48a680a8770">Figure 2. Use Case Diagram (Source: https://venngage.com/blog/use-case-diagram/)</p></caption><popout enable="false"></popout></image><p id="d831019a3bfd490b974f1dfade956f0d">Apart from employing diagrams, it is also a good practice to make a list of tools and dependencies along with the suitable versions that the project may require.</p><p id="b0f5f68e43b24a5496fdba888ced895d">This documentation also helps the developers think about various risks and challenges involved in the data science project. These risks could be domain, technical or business-related risks that are a part of the solution proposed for this project.</p></body></workbook_page>\n'