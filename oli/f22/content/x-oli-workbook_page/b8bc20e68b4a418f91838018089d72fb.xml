b'<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE workbook_page PUBLIC "-//Carnegie Mellon University//DTD Workbook Page MathML 3.8//EN" "http://oli.web.cmu.edu/dtd/oli_workbook_page_mathml_3_8.dtd"><workbook_page xmlns:bib="http://bibtexml.sf.net/" xmlns:cmd="http://oli.web.cmu.edu/content/metadata/2.1/" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pref="http://oli.web.cmu.edu/preferences/" xmlns:theme="http://oli.web.cmu.edu/presentation/" xmlns:wb="http://oli.web.cmu.edu/activity/workbook/" id="b8bc20e68b4a418f91838018089d72fb"><head><title>Module 9 Summary</title></head><body><ul id="c38c84a426e0481ca797eafdce90b5b7"><li><p id="aefcedd9ac0e41d791efd58baeb6ab3f">Functionality is the most vital characteristic of an abstract data type that every user must understand. It is often communicated via an API that specifies the operations and input-output data for each API call, as well as a description of the function that the call delivers.</p></li><li><p id="cdbde13b8a2c46359ca2d0225b624e07">A specific concrete data structure can be used to implement multiple abstract data sets. For example, a pair of real numbers as a concrete structure can implement two-dimensional vectors in a cartesian vector space where the two numbers represent the components of a vector along the x and y axes. Operations such as vector addition or the dot product of two vectors can be then implemented using this representation.</p></li><li><p id="f360314e2e5b4174a9dcf4cc4d5b4837">Concrete data structures are used to implement abstract data types correctly, but this implementation determines the cost of the abstract data.</p></li><li><p id="f9d6c1d7d0434fbc9ec9b5949793685a">Asymptotic analysis is the study of how an algorithm grows as a function of the size of the input data to the algorithm. The basic idea is to model how the growth rate of two functions compares to large input. When analyzing an algorithm, we build a mathematical model of how the number of steps the algorithm executes depends on the size of the input.</p></li><li><p id="af6306a9f3ef40e2ad82811305730cff">Big-O Notation: We say a function f(n) is O(g(n) if there are positive constants c and n0 such that for n \xe2\x89\xa5 n0 f(n) \xe2\x89\xa4 c\xc2\xb7g(n). That is, beyond n0, f(n) grows at most as fast as c \xc2\xb7 g(n). That is, c \xc2\xb7 g(n) always dominates f(n) in growth.</p></li><li><p id="f2966fd8da09492eac5d655d61e82dc1">It is important to understand how the time and memory cost grow with the size of the input, i.e., the time and space complexity for an algorithm. There is often a trade-off between runtime and space complexity, which typically comes in the form of storing intermediate values (using more space) to avoid re-computing them (reducing runtime).</p></li><li><p id="c435bcf075164317aa34f019dabfacdc">Learning to use the right data structure for different use cases is an essential skill for writing efficient programs and building complex applications.</p></li><li><p id="a32f2e4498b74256aafacded3295e955">An algorithm represents data and relations between data items using a variety of abstract data types. Some of the most commonly used abstract data types include Sequences, Sets, Tables, Graphs, Trees, and Priority Queues.</p></li></ul></body></workbook_page>\n'