b'<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE workbook_page PUBLIC "-//Carnegie Mellon University//DTD Workbook Page MathML 3.8//EN" "http://oli.web.cmu.edu/dtd/oli_workbook_page_mathml_3_8.dtd"><workbook_page xmlns:bib="http://bibtexml.sf.net/" xmlns:cmd="http://oli.web.cmu.edu/content/metadata/2.1/" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pref="http://oli.web.cmu.edu/preferences/" xmlns:theme="http://oli.web.cmu.edu/presentation/" xmlns:wb="http://oli.web.cmu.edu/activity/workbook/" id="b390de2b784d43dca12b8e4901c4c96a"><head><title>Fundamental Abstract Data Types</title><objref idref="c333f266dcfb42c6a79b383a4c4612b7" /><objref idref="f9023ae790c84b0080551d755838ac10" /><objref idref="bfa14b8b0d5e430aae840715068df244" /><objref idref="f80c8a9b70e04d5888f5b47d8f4e0a0c" /></head><body><p id="fd9b5aea84264d7eacd8fe6e10a93712">Algorithms represent data and relations between data items using a variety of abstract data types. The most commonly used abstract data types are the following:</p><ul id="e1091f7511754c6992232be2a54e7f2a"><li><p id="efd3ce10c980463888836f55348ed5dd"><em>Sequences</em>: Sequences, also called one-dimensional arrays. Many programming languages and lists in Python. Typically arrays are fixed size. Items are identified by positions or indices, starting with 0. Given an index, any item can be accessed in constant time; old items can be replaced with new values similarly. Languages like Python allow the extension of an array if one needs to add new values to the end of the array. Further, Python lists can hold data values or different underlying types.</p></li><li><p id="aeda4fdbb4af4c6cbb97594f09af2a1b"><em>Sets</em>: Sets let one represent the equivalent of finite sets in mathematics, with elements coming from some domain where equality between the elements in the domain is defined in some way. The operations on sets are the typical operations one does on mathematical sets:</p><ul id="f50f33b9dd8248a0b1ad7770a727f687"><li><p id="bbb31a932cb74816b3148bd3441539ad">Intersection and union of sets,</p></li><li><p id="eb81eb29d81d4997ad66c5f0e24c4152">Subtraction of one set from another set, </p></li><li><p id="fe84de60d4dd4401b287b5e7626945c7">Inserting elements into a set or removing an element from a set,</p></li><li><p id="d0b75c83d37c4c07ab0ee28409f8e129">Checking if a given element of the domain is a member of a set,</p></li><li><p id="e634c6da0d0f490ebefe2a74987625f3">Computing the size of a set.</p></li></ul><p id="aaa6c759be89480d9d2c3377b876c4d1">In <em style="italic">ordered</em> sets, the elements are assumed to be orderable based on a \\(&lt;\\) relationship. With sorted sets, we can <em style="italic">also</em> do operations such as</p><ul id="df27560b7a9543129f7d846cfc31eeac"><li><p id="d604291862e14015b3b0e8568dc195b6">Find the \\(i^{th}\\) smallest element of a set,</p></li><li><p id="ddce668ad323493da998cf98b5c68b1d">Find the ordered position in the set of a specific value \\(x\\) (same as finding the number of elements in the set less than a given \\(x\\)).</p></li></ul></li><li><p id="a89c944bf6474fbf909e43971f71f2b0"><em>Tables</em>: Tables are an extension of sets. Each element in a table \\((k, v)\\) consists of a key \\(k\\) and an associated value \\(v\\). Key values in a table should be unique. Set operations like union, intersection, and difference on tables are done based on the key values with some provisions for conflicts. But one mainly uses tables typically for finding the value \\(v\\) associated with a key. Similarly, tables can be ordered based on a key if there is a need.</p></li><li><p id="f4eff2f69ac54c00a483eeef2485e791"><em>Graphs</em>: Graphs are the most versatile abstract data types. They are typically used to represent a set of items (called <em style="italic">nodes</em>) along with asymmetric or symmetric relations between those items (called <em style="italic">edges</em>). For example, graphs can be used to represent</p><ul id="eb0d1b3f5c08460fa392728b18cf6eaa"><li><p id="ee12c499bd584a06af8688fe38367b4f">Social networks with nodes representing people and edges representing \xe2\x80\x9cfriendship\xe2\x80\x9d or \xe2\x80\x9cfollows\xe2\x80\x9d relations between them.</p></li><li><p id="e4d37de3a9b744f49a3378d18db59460">Transportation networks with nodes representing \xe2\x80\x9cintersections\xe2\x80\x9d and edges representing the roads between the intersections, with a distance measure associated with each road.</p></li><li><p id="e57cdad889b24d74bac0b377161beb39">Neural networks with nodes representing neurons and edges representing weighted connections.</p></li></ul><p id="e692382c4bde47578c2908ef7d4ab9e7">There is a whole set of operations one can do on graphs that can compute all kinds of useful information about the data and the relations. Here are some of such operations:</p><ul id="a1b422f3584f421f9d0522cc19c23db8"><li><p id="cc4ea6be463849d1b05b7b81049fc8a7">What is the shortest distance between any two intersections?</p></li><li><p id="a5a5cf4c4050454fa989e0b079ea9c1c">Who are the people on a social network with more that 100 connections?</p></li></ul></li><li><p id="a4494468869246bbb14f3c6279cc183a"><em>Trees</em>: Trees are special cases of graphs and are used to represent hierarchical relations such as parent\xe2\x80\x93child relations. This restriction usually allows for more memory-efficient representations or time-efficient operations for specific classes of operations.</p></li><li><p id="a854ad52fd3c4a42aa25220a020210a8"><em>Priority Queues</em>: Priority queues are essentially sets where each element consists of a value, and a priority, and the only operations one can do are</p><ul id="a5d731fba21e451a8ec0031a6615c0b1"><li><p id="c6a7aa1efe0f4ceab67b6839ffe45a05">Inserting a value with its priority</p></li><li><p id="d8357f1559ad4f6e8e8806858c806678">Finding or deleting a value with the maximum priority.</p></li></ul></li></ul><p id="d1d948ad2cfa4e0c9eb43259eb69c6c8">While we listed these as abstract data types, some of these types are used to implement others, usually in a nested way. For instance, sets and tables can be used to implement graphs, while trees (specifically their balanced binary variants) can be used to efficiently implement sets, tables, or sequences. More details on these are beyond the scope of this section and are typically the topic of an introductory course and book on data structures and algorithms.</p><p id="d45600e7c88c438796c76f677232d8a0">One can also refer to <link href="https://en.wikipedia.org/wiki/Abstract_data_ type" target="new" internal="false">https://en.wikipedia.org/wiki/Abstract_data_ type</link> for more details on abstract data types.</p></body></workbook_page>\n'