b'<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE workbook_page PUBLIC "-//Carnegie Mellon University//DTD Workbook Page MathML 3.8//EN" "http://oli.web.cmu.edu/dtd/oli_workbook_page_mathml_3_8.dtd"><workbook_page xmlns:bib="http://bibtexml.sf.net/" xmlns:cmd="http://oli.web.cmu.edu/content/metadata/2.1/" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pref="http://oli.web.cmu.edu/preferences/" xmlns:theme="http://oli.web.cmu.edu/presentation/" xmlns:wb="http://oli.web.cmu.edu/activity/workbook/" id="c925074097744ccba39546b7be2d28c9"><head><title>Ranking</title></head><body><p id="db9caab0233544d881b7de399f2a445f">A data science pattern that can be used to solve different data science tasks from machine translation to information retrieval is Ranking. Learning-to-rank is a technique used to train a model for ranking tasks. We do not always want to predict the probability of scenarios. We just might want to rank things. Ranking is used to solve information retrieval problems, including collaborative filtering, sentiment analysis, and document retrieval. The learning-to-rank technique is applied in supervised learning to rank results according to relevancy. When you are building a model using this approach, you must decide on the features used but also on the adequate relevance criteria.</p><p id="e263491b26ae43699ae3fb76896f22a9">Assume that you have a set of documents and that users pose queries to retrieve documents matching a query ranked based on a measure of relevance to a query.   We can use one of the following approaches:</p><ul id="e92c408ded794c54b1744cfeb85b8a9a"><li><p id="d58e432f0d924c2c8e656bbdd92e5ab5"><em style="italic">Pointwise Approach</em> is used under the assumption that each we can compute a numerical score that captures how much a document is relevant to a query. Once we know these scores, we can rank the documents.  Thus the learning-to-rank problem can be cast as a regression problem \xe2\x80\x94 given a (training set of ) query-document pair, learn to predict a relevance score. Ordinal regression and classification algorithms can also be used in a pointwise approach when they are used to predict the score of a single query-document pair, and it takes a small, finite number of values.</p></li><li><p id="e3213485337d4e1a9b834495c4f13204"><em style="italic">Pairwise Approach</em> seeks to reduce the average number of wrongly ordered rankings in comparison to the ideal expected result (also known as the ground truth). Ranking using the pairwise approach becomes a classification or regression task. Every pair of documents is classified by a binary classifier which determines which one of the pairs is more relevant to the query. Then based on these pairwise rankings a global ranking is produced minimizing the number of out-of-order pairs in the final list.</p></li><li><p id="f52c4868068a417fb9771c3d45e80713"><em style="italic">Listwise Approach</em> reviews the list of documents and produces an optimal ordering.  It tries to directly optimize the value of one of the above evaluation measures, averaging over all queries in the training data. This is difficult because most evaluation measures are not continuous functions with respect to the ranking model&apos;s parameters.</p></li></ul><p id="cee46970f94d49cab7588049d239d65d">Microsoft Research has developed the three known learnings to rank algorithms that all use pairwise ranking:</p><ul id="f40a992677294987b721cdc59f3c9c91"><li><p id="a8a32f9fb302400e996ea5d2d0624b29"><em style="italic">RankNet</em> uses gradient descent to update the weights or model parameters for a learning-to-rank task. This algorithm seeks to minimize the number of wrong orderings among a pair of results of a ranked list.</p></li><li><p id="b2845e7993f84de0aeb4ba45c5463b16"><em style="italic">LambdaRank</em> uses a cost function to train a RankNet which results in speed and accuracy improvements.</p></li><li><p id="e0a6e7c9ef1e4f4485b3e0d30ad70e32"><em style="italic">LambdaMART</em> uses Multiple Additive Regression Trees (MART is an implementation of the gradient tree boosting methods for regression and classification) and LambdaRank to solve a ranking task.</p></li></ul><image id="a0926423c651463594a32cac3eb56520" src="../webcontent/LTR.jpg" alt="" style="inline" vertical-align="middle" height="258" width="500"><caption><p id="beb947bc89a44026aa542df06bf68ec2">Learning to Rank Algorithms (Source: Lucidworks)</p></caption><popout enable="false"></popout></image><table id="cf36c091428146c99f275fbcbe52b896" summary="" rowstyle="plain"><cite id="i57e0d8196662429791bb977857befb93" /><caption><p id="a3573121e85c418893a641700a9516c2" /></caption><tr><td colspan="1" rowspan="1" align="left"><p id="ff1851e83c3041a18e4e70090a951c37"><em>Additional Reading: </em><link href="https://www.aboutwayfair.com/data-science/2020/01/bayesian-product-ranking-at-wayfair/" target="new" internal="false">Application of LTR - Bayesian Product Ranking at Wayfair</link></p></td></tr><tr><td colspan="1" rowspan="1" align="left"><p id="a4f1696a69894be3bee154c2615ce2c5"><em>Additional Reading: </em><link href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/MSR-TR-2010-82.pdf" target="new" internal="false">From RankNet to LambdaRank to LambdaMART</link></p></td></tr></table></body></workbook_page>\n'