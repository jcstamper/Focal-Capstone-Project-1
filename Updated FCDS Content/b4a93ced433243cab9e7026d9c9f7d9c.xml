b'<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE workbook_page PUBLIC "-//Carnegie Mellon University//DTD Workbook Page MathML 3.8//EN" "http://oli.web.cmu.edu/dtd/oli_workbook_page_mathml_3_8.dtd"><workbook_page xmlns:bib="http://bibtexml.sf.net/" xmlns:cmd="http://oli.web.cmu.edu/content/metadata/2.1/" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pref="http://oli.web.cmu.edu/preferences/" xmlns:theme="http://oli.web.cmu.edu/presentation/" xmlns:wb="http://oli.web.cmu.edu/activity/workbook/" id="b4a93ced433243cab9e7026d9c9f7d9c"><head><title>Attention is All You Need</title></head><body><table id="cf42a3b50efb42da9d3fb72509ba3b79" summary="" rowstyle="plain"><cite id="ic4369e23e4cc47bb88fcfc31cbd354d5" /><caption /><tr><td colspan="1" rowspan="1" align="left"><p id="fb8e5a75d05946568571e9cf6036660c"><em>[REQUIRED READING] </em>Vaswani, A., Shazeer, N., Parmar, N., Uszkoreit, J., Jones, L., Gomez, A. N., ... &amp; Polosukhin, I. (2017). Attention is all you need. <em style="italic">Advances in neural information processing systems</em>, <em style="italic">30</em>. <link href="https://proceedings.neurips.cc/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf" target="new" internal="false">[pdf]</link></p></td></tr></table><p id="dbff03115aba4151b2df094d9f46aa47">The content of this paper is essentially similar to the Language Representation, and Transformers module introduced earlier in the course. However, because this is a foundational work in modern NLP, we have opted to cover it again in this research paper module. Here we will focus more on understanding how the paper was presented to the research community and which areas it contributes to.</p><p id="c2d421b18eda44e786a36e09d75d6619"><em>Who are the papers&apos; authors? Why are they qualified to write about this topic?</em></p><p id="f7cf0759b9fa4120bac59ddee47206ba">The authors are a group of researchers and engineers from Google Brain, Google Research, and the University of Toronto, with expertise in deep learning and natural language understanding. Prior to this paper, they worked on various language research projects related to Google\xe2\x80\x99s services, such as language translation, speech tagging, and language inference. Interestingly, the majority of the authors have left their affiliations at the time of this paper to found their own NLP startups.</p><p id="e1e29e95006d415592a84f97e92865fe"><em>Who is the audience of the paper?</em></p><p id="eea8540c773646e38bde016d73137840">The paper targets ML researchers and engineers who build large-scale language models. It is pivoting a switch from the RNN/LSTM paradigm to a new transformer architecture that was shown to achieve state-of-the-art performance in language translation.</p><p id="c4c9278c7cf4413f94f59a4d3726d7ca"><em>Why is the paper\xe2\x80\x99s topic relevant at the time of its writing?</em></p><p id="c9a060f507c44e25a0f7907be9e72ca8">Since the resurgence of deep learning in 2012, many advances have been made in neural network architectures and methodologies, although they mostly apply to computer vision (e.g., AlexNet, VGGNet, ResNet). There wasn\xe2\x80\x99t a similarly impactful innovation for natural language processing - RNNs are designed to handle sequential data but suffer from exploding/vanishing gradients; LSTMs address this issue but require three times more matrix computations. In addition, these recurrent models can only process data sequentially and do not benefit from the powerful parallel processing of modern GPUs. This paper is part of an effort to build new neural architectures that address these issues.</p><p id="ce678db518b946118052191ae4e13e77"><em>What is the paper\xe2\x80\x99s contribution? Which research gap is it trying to address?</em></p><p id="bba67573e47042f7a8f01e73e2e596da">There are two primary innovations from the paper.</p><p id="d5a97f4c73eb4073b4875264592c1575"><em>Positional Encoding</em> is a novel way of representing word order in a sentence. Given the sentence \xe2\x80\x9cI like data science,\xe2\x80\x9d an RNN knows that \xe2\x80\x9clike\xe2\x80\x9d comes after \xe2\x80\x9cI\xe2\x80\x9d because it processes the tokens sequentially and therefore receives \xe2\x80\x9cI\xe2\x80\x9d as input before \xe2\x80\x9clike.\xe2\x80\x9d Transformers, on the other hand, construct inputs that consist of both the original tokens and their index locations in the sentence, i.e., [(\xe2\x80\x9cI\xe2\x80\x9d, 1), (\xe2\x80\x9clike\xe2\x80\x9d, 2), (\xe2\x80\x9cdata\xe2\x80\x9d, 3), (\xe2\x80\x9cscience\xe2\x80\x9d, 4)]. In addition to learning the embedding of the tokens, they will also learn the encoding of these index locations and, therefore, the importance of word ordering (the paper actually uses fixed formulas for the positional encoding, \\(PE_{(pos, 2i)}\\) and \\(PE_{(pos, 2i+1)}\\), because they were shown to produce similar results to the learned positional embeddings). Note also that this approach enables the parallel processing of all tokens because their ordering within the input sentence has already been represented by the index locations.</p><p id="f01d9bf19b7b427481b5d09aea2b0ba6"><em>Self-attention</em> is a mechanism that relates different positions of a single sequence to compute a representation of this sequence. At a high level, self-attention allows a neural network to understand a word in the context of the other words around it \xe2\x80\x93 for example, it may know that \xe2\x80\x9cback\xe2\x80\x9d has different meanings in \xe2\x80\x9cI came back from work\xe2\x80\x9d and in \xe2\x80\x9cmy back hurts\xe2\x80\x9d because it attends to the token \xe2\x80\x9ccame\xe2\x80\x9d in the first sentence and \xe2\x80\x9churts\xe2\x80\x9d in the second. While self-attention has been used in prior works in conjunction with recurrent or convolutional neural networks, the innovation of this paper lies in using self-attention alone, without the associated recurrent or convolutional structure, to achieve state-of-the-art results. This is also where the paper title \xe2\x80\x9cAttention is all you need\xe2\x80\x9d comes from. As an unrelated note, the template \xe2\x80\x9cX is all you need\xe2\x80\x9d subsequently became popular in the machine learning literature, with a <link href="https://arxiv.org/pdf/2201.09792.pdf" target="new" internal="false">recent paper</link> from CMU that both make use of it and poke fun at it.</p><p id="ced03615a121415c8f8d90a59d1c9911"><em>Summarize the paper\xe2\x80\x99s experiments and findings</em></p><p id="b4b717d3132f4ed08f33769f67c93dc2">The paper proposes the Transformer model architecture (Figure 2) for language translation, whose training procedure can be summarized as follows. Given an input sequence of tokens (e.g., an English sentence) and an output sequence of tokens (e.g., a French sentence):</p><p id="a4ef9a6d6629497b80d2f30804fb8bd4"><em>Step 1</em>: Convert each input sequence token to its vector embedding. Add this vector to the positional encoding vector, i.e., \\(PE_{(pos, 2i)}\\) or \\(PE_{(pos, 2i+1)}\\) to yield the word vector with positional information for each token.</p><image id="b64027094f5a4e9c9006970069f7c262" src="../webcontent/image-f65523c9e29b4324bcb047ee80427ae7-1.png" alt="" style="inline" vertical-align="middle" height="210" width="300"><caption><p id="d3922adba617427c82731c7836b27680" /></caption><popout enable="false"></popout></image><p id="f38ed353b8bd4a698b6bf9de2be96eb9"><em>Step 2</em>: Pass the input sequence word vectors into the encoder block, which consists of a multi-headed attention unit and a fully-connected feedforward neural network unit. The attention unit generates an attention vector for every token in the input sequence to represent how much the token is related to other tokens in the same sentence. This process is performed \\(h = 8\\) times with different, learned linear projections to different dimensions. Thus, every input token yields \\(h\\) attention vectors, which are then concatenated to form a single vector (the name multi-headed refers to the fact that multiple vectors are concatenated in this step). These attention vectors are then passed to identical but independent feedforward neural networks in parallel, outputting an encoded vector for every input token.</p><image id="e7f3469d0f63445d8e30fac40cd5a99f" src="../webcontent/image-f65523c9e29b4324bcb047ee80427ae7-2.png" alt="" style="inline" vertical-align="middle" height="340" width="300"><caption><p id="b249b89eaf0c4b86a8c74868fa9b0b5d" /></caption><popout enable="false"></popout></image><p id="adcc9d520baa41e4a00eb33dde0fa3a0"><em>Step 3</em> is similar to Step 1 but carried out on the output sequence tokens.</p><image id="c1847f146378440fa16e1fa58bb378ce" src="../webcontent/image-f65523c9e29b4324bcb047ee80427ae7-3.png" alt="" style="inline" vertical-align="middle" height="230" width="300"><caption><p id="cf95d7a1d3b147b3a47b2825785015b9" /></caption><popout enable="false"></popout></image><p id="e6bf305a592d491ebeac385fbf6bb05a"><em>Step 4</em>: Pass the output sequence word vectors into the decoder block, which contains a masked multi-headed attention unit, followed by a multi-headed attention unit and a feedforward unit. The first attention unit generates an attention vector for every token in the output sequence to represent how much the token is related to other tokens <em style="italic">before and including it</em> in the same sentence (this is where the term \xe2\x80\x9cmasked\xe2\x80\x9d comes from \xe2\x80\x93 we mask away the tokens after the current token because those are our prediction goals). These attention vectors for the output tokens, combined with the output of the encoder block, are passed into the second attention unit. This unit generates an attention vector for every token in <em style="italic">both the input and output sequence</em> to represent how much the token is related to every other token in both sequences (in other words, this unit relates every input English token to all the other input English tokens and to all the output French tokens).</p><image id="a6340a82801c44dabee889531f140c4a" src="../webcontent/image-f65523c9e29b4324bcb047ee80427ae7-4.png" alt="" style="inline" vertical-align="middle" height="520" width="300"><caption><p id="e4519fb51e3a4916b2c3b5d2a1c2508d" /></caption><popout enable="false"></popout></image><p id="c9ee1398100844269ad34e4229fce65e"><em>Step 5</em>: The output from step 4 is fed to a standard linear classifier, represented as a fully connected layer with a softmax activation function. The layer outputs the probability that each word in French is the next output (in other words, this is a multi-class classification problem where the classes are all the French words, and the word with the highest probability value is predicted to be the next output token).</p><image id="e896742e6d9f41279a7efc349ac90140" src="../webcontent/image-f65523c9e29b4324bcb047ee80427ae7-5.png" alt="" style="inline" vertical-align="middle" height="330" width="300"><caption><p id="e901875ae83d48b1b07ef8cb793c488d" /></caption><popout enable="false"></popout></image><p id="e12af6330da64acf967b390128fd7a25">Additionally, batch normalization is applied after every unit to smoothen the data and make it easier to learn with larger learning rates.</p><p id="f8de8315c3a74e00805d47ea52e856bb">During inference, the same process as above applies, but the output sequence is replaced by an empty sequence with only a start-of-sequence token (because this is the prediction goal). The transformer will predict the next token one by one and add each predicted token to the output sequence, so that it can be used as the basis for the next token prediction. This is the same inference technique used by Sequence2Sequence models, except that at each timestep, we use the entire output sequence generated so far, rather than only the most recent prediction.</p><p id="fc9d892cc9164dbfb4f2c48934355744">The above architecture was evaluated in two tasks: English-German translation and English-French translation. Details about the training process and hyperparameters used can be found in Section 5 of the paper. Results from the experiment (Table 2) showed a better <link href="https://en.wikipedia.org/wiki/BLEU" target="new" internal="false">BLEU</link> scores than previous state-of-the-art models at a fraction of the training cost.</p><p id="a4233e7d86a94e32b2c7ec5fc5fed285"><em>What are the implications of the paper\xe2\x80\x99s findings? What can an outsider like us expect to learn from this paper?</em></p><p id="a7081f195fc84f1db00c291171106173">The paper presents a novel Transformer architecture that significantly improves upon the standard RNN/LSTM variations in both performance and efficiency. Transformers have been extensively used in both natural language processing and computer vision research following the publication of this paper (which has been cited more than 47,000 times, based on Google Scholar). It also led to the release of large-scale pre-trained Transformer models, such as <link href="https://huggingface.co/docs/transformers/model_doc/bert" target="new" internal="false">BERT</link>, <link href="https://openai.com/api/" target="new" internal="false">GPT-3</link> and <link href="https://ai.googleblog.com/2020/02/exploring-transfer-learning-with-t5.html" target="new" internal="false">T5</link>, which anyone can utilize for their own projects.</p></body></workbook_page>\n'