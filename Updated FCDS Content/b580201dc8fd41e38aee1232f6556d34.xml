b'<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE workbook_page PUBLIC "-//Carnegie Mellon University//DTD Workbook Page MathML 3.8//EN" "http://oli.web.cmu.edu/dtd/oli_workbook_page_mathml_3_8.dtd"><workbook_page xmlns:bib="http://bibtexml.sf.net/" xmlns:cmd="http://oli.web.cmu.edu/content/metadata/2.1/" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pref="http://oli.web.cmu.edu/preferences/" xmlns:theme="http://oli.web.cmu.edu/presentation/" xmlns:wb="http://oli.web.cmu.edu/activity/workbook/" id="b580201dc8fd41e38aee1232f6556d34"><head><title>Diagrams in Design Document</title></head><body><p id="aed0dbef0d7a4b3380ec3c0618585fd9">It would be helpful to think about what you would like to showcase in your diagrams. The following classifications of diagrams can help you get started.</p><ol id="ca95c79422714edcb8eb78e5d2ac8a9a"><li><p id="c63b00197781497d9d88f74f4ecb83e6">Modules And Their Relationships - How code is structured</p></li><li><p id="cc69cfb0dea645048dc2a7be43873568">Runtime Components and Connections - How data flow during runtime</p></li><li><p id="f322406dfec04139a19f143eb21df40e">Deployment Diagrams - What is Infrastructure for the architecture</p></li></ol><p id="ac6d40e82eb346048c4ba3caa1afb7ee">You can use these types of diagrams at any layer of abstraction, i.e., you can use these types of diagrams to describe  a high-level view of the system or a sub-system, as is apparent in the exemplar documentation.</p><p id="f7e3b5ec52634884bc755480284f2ce2"><em style="italic">Friendly reminder: Don\xe2\x80\x99t forget to include a legend in your diagrams. It greatly increases the readability of your diagrams and helps with communication.</em></p><section id="d0cfede1df394eda8db4fbb6a51aa397"><title>1. Modules And Their Relationships</title><body><p id="a9c860030c2f477390b429162fbdc12f">These diagrams are useful if you would like to show modules and their relationships with each other. Modules represent a static way of structuring the system. In these diagrams, we do not care much about how the system behaves at runtime.</p><p id="dee294531bec49cfa380e16813c56d25">Modules allow us to answer questions like:</p><ol id="cfc13d27eb9d4c63b81a1698ca50e7c1"><li><p id="f4bd8457c9ab4495bf670145b694fc61">What are the different business functions in your system?</p></li><li><p id="c28bf33061c4428a82469aad27d81d3a">What other modules does each business function depend on?</p></li><li><p id="f5384ec0430742be92fe5947d4705f55">Are there any external dependencies for each module?</p></li><li><p id="fa40d3155d234b82a915d57c78028d49">Does any module inherit behavior from another module?</p></li></ol><section id="ecb719547ee044d3b9a101f31235406c"><title>Example:</title><body><image id="ba60a1f09d9a4674ae60e6e20f946e4f" src="../webcontent/Screen_Shot_2022-05-19_at_110239_pm.png" alt="" style="inline" vertical-align="middle" height="846" width="600"><caption><p id="fb07337cba674f619abfb55f8e81e218">Figure 1. Execution Graph of a Completed Run of the Continuous Training Pipeline (ACAI, MCDS Capstone Project, 2020)</p></caption><popout enable="false"></popout></image></body></section><p id="a767904ce7b24bad9a7bcee762f90a84">Notice how model dependency is represented in this execution graph, as it is important to this project.</p></body></section><section id="a9da486e5b804d3593a1682c5eba4ac4"><title>2. Runtime Components and Connectors</title><body><p id="d0b71207f2864074a979d3ca43552ef2">When you want to showcase how a system functions during runtime, you can use Components and Connectors. Each runtime element is related to another element via a Connector, which should be adequately described in your writeup as well as in the legend.</p><p id="aedee9a2610c4b0e8ee36a8ceef62b49">Examples of runtime elements, i.e., components are:</p><ol id="a1801a3351444f4eb126423b2570542b"><li><p id="dc366235c63d4104a43bf34cb2ab687e">Services</p></li><li><p id="a259d51d34cc4c81ab7ba3306a3426c3">Peers</p></li><li><p id="fab3203d693945099a5f5a3bf3aad83d">Clients</p></li><li><p id="cf5ad62a5049441e988a3ba1ca557923">Servers</p></li><li><p id="c959581bec164d52ae7da36e942d9c6c">Filter Systems</p></li></ol><p id="a832894acbf945d989009d5f5cc70792">Examples of connectors also called vehicles of communication are:</p><ol id="d9936b7b641f446fa2656cac1e09a3c4"><li><p id="d76edf43c88645729d7274760e07ed4d">Call-return style connector</p></li><li><p id="d7f62b578b714085a0ff3bb404fc0a3e">Data pipelines</p></li><li><p id="da906e21e3bc435fbd253150adf58afd">Process synchronization operators</p></li></ol><p id="c2e3e2cb575a4cb48e6cbcfff682e37c">These diagrams help us answer the following type of questions:</p><ol id="e2ddb592940f4ea587da18e8cbe58605"><li><p id="e2dbf95117b64f898271e3b3055541b0">What are the major components of your system at runtime?</p></li><li><p id="e515ba1c786148b087c82ba1c1eadfd5">Does the system  have shared data stores? What is the nature of these stores, i.e., are they persistent or transient, etc.?</p></li><li><p id="f8122bb5fdd34ae8a062bc121b10ba60">How does data progress through the system?</p></li><li><p id="d8ec3ebcbffa419280e7034f16391fe8">Does anything run in parallel?</p></li></ol><section id="fa4f93b867d54374a4af17264677c56d"><title>Example: Design of ML Workflow in ACAI</title><body><p id="e5f77bddfce44820a07160eb7f598d64">This is a good example of using components and connectors to provide a high-level view of the flow of data. We can see that connection types have been labeled separately to represent the different types of data transfer that can happen in the system.</p><image id="fe267119f7c9496f9dc48c504cc5db1d" src="../webcontent/acai_ml_workflow.png" alt="" style="inline" vertical-align="middle" height="336" width="700"><caption><p id="f06cce4af9de4fceae053f6d2d836445">Figure 2. A Typical ML Workflow in ACAI (ACAI, MCDS Capstone Project, 2020)</p></caption><popout enable="false"></popout></image></body></section></body></section><section id="be6939c4356f478298dbb7411657fc90"><title>3. Deployment Diagrams, also called Diagrams in Deployment Model</title><body><p id="b6fc2d9a5fea476fbdce18297917d7ae">Representing deployment models can be confusing because they look very similar to runtime diagrams.</p><p id="c72d7b13f601492fa0dabe22d907e21d">The important distinction between the two is that deployment diagrams are meant to display the interaction of the solution with non-software structures like CPUs, file systems, networks, development teams, etc.</p><p id="eb2cf4aee00d4487a46a33ea5b479952">In a deployment model, you will need to make infrastructural considerations for your solution. Your deployment model will help answer questions like:</p><ol id="c01bc83d9cd24179a13667331f687d48"><li><p id="f00a848e7c2648f59c3f3e26d48526c2">What cloud instance type does your solution execute on?</p></li><li><p id="ca14da6322fe402eaf140ff9b8a0043a">What type of cloud data store are you expected to use?</p></li><li><p id="da6967e8c09d4587b0abdc84c2407432">Who deploys the solution?</p></li><li><p id="a1c6e64942d64ad2a57a07143886e7aa">What type of queuing system are you expected to use?</p></li></ol><section id="dbb854b9c52047b18e26a0ea7dcada65"><title>Example</title><body><p id="ba526997206541e7b8ea5aa6e0e722a5">In the following example, we know that we have docker containers that interact with a Job Monitor, a Log Server, and a Launcher.</p><p id="a610aef653744379b3f843dc21a8866b">A Job Registry requires the use of an SQL server. In your diagrams, you can be specific about particular SQL servers like MySQL/Postgres if the requirement is clear.</p><image id="aa126fe060a644b9bb6c3f6c92a1ee89" src="../webcontent/acai_excecution_engine_architecture.png" alt="" style="inline" vertical-align="middle" height="369" width="650"><caption><p id="e1f0ce42d329454ea49896bafe42de82">Figure 3. Overview of Execution Engine Architecture (ACAI, MCDS Capstone Project, 2020)</p></caption><popout enable="false"></popout></image></body></section></body></section></body></workbook_page>\n'